---
# tasks file for roles/deploy

- name: Identify jar file
  find:
    paths: "{{ role_path }}/files"
    patterns: "*.jar"
    recurse: no
  register: app_jar
  delegate_to: localhost

- name: Ensure deployment directory exists
  file:
    path: "{{ deployment_directory }}/{{ app_jar.files[0].path | basename | regex_replace('(.jar)$','') }}"
    state: directory

- name: Generate spring configuration file in deployment directory
  template:
    src: application.properties.j2
    dest: "{{ deployment_directory }}/{{ app_jar.files[0].path | basename | regex_replace('(.jar)$','') }}/application.properties"
    mode: "0755"



- name: Copy jar file to deployment directory
  copy:
    src: "{{ app_jar.files[0].path }}"
    dest: "{{ deployment_directory }}/{{ app_jar.files[0].path | basename | regex_replace('(.jar)$','') }}/{{ app_jar.files[0].path | basename }}"

- name: Check if a .pid file exists in /var/run
  stat:
    path: "/var/run/{{ app_jar.files[0].path | basename | regex_replace('(.jar)$','') }}.pid"
  register: pid_file_stat
  ignore_errors: yes

- name: Kill the process if .pid file exists
  shell: "kill -9 $(cat /var/run/{{ app_jar.files[0].path | basename | regex_replace('(.jar)$','') }}.pid)"
  when: pid_file_stat.stat.exists
  ignore_errors: yes

- name: Delete the .pid file
  file:
    path: "/var/run/{{ app_jar.files[0].path | basename | regex_replace('(.jar)$','') }}.pid"
    state: absent
  when: pid_file_stat.stat.exists
  ignore_errors: yes

- name: Execute the jar file on target
  shell: >
    nohup java -jar {{ deployment_directory }}/{{ app_jar.files[0].path | basename | regex_replace('(.jar)$','') }}/{{ app_jar.files[0].path | basename }} --spring.config.location={{ deployment_directory }}/{{ app_jar.files[0].path | basename | regex_replace('(.jar)$','') }}/application.properties &
    echo $! > /var/run/{{ app_jar.files[0].path | basename | regex_replace('(.jar)$','') }}.pid
  when: app_jar.matched > 0
